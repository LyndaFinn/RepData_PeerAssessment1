jStart <- as.logical(j %% 2)
start <- iStart & jStart
full[i,j] <- start
full[j,i] <- !start
}
}
full
full<-matrix(nrow=11,ncol=11)
iStart <- TRUE
for (i in 1:11 ) {
k <- i+1
if (k>11) break
for (j in k:11 ){
full[i,j] <- iStart
full[j,i] <- iStart
iStart <- !iStart
}
}
full
apply(full,2,sum, na.rm=TRUE)
apply(full,1,sum, na.rm=TRUE)
full<-matrix(nrow=11,ncol=11)
iStart <- TRUE
for (i in 1:11 ) {
k <- i+1
if (k>11) break
for (j in k:11 ){
full[i,j] <- iStart
full[j,i] <- iStart
iStart <- !iStart
}
iStart <- !iStart
}
#check
apply(full,2,sum, na.rm=TRUE)
apply(full,1,sum, na.rm=TRUE)
full
full<-matrix(nrow=11,ncol=11)
iStart <- TRUE
for (i in 1:11 ) {
k <- i+1
if (k>11) break
if(sum(full[i,] , na.rm=TRUE)> i/2) {iStart=FALSE}
if(sum(full[i,] , na.rm=TRUE)< i/2) {iStart=TRUE}
for (j in k:11 ){
full[i,j] <- iStart
full[j,i] <- iStart
iStart <- !iStart
}
}
#check
apply(full,2,sum, na.rm=TRUE)
apply(full,1,sum, na.rm=TRUE)
full
i/2
sum(full[4,1:3])
full<-matrix(nrow=11,ncol=11)
iStart <- TRUE
for (i in 1:11 ) {
k <- i+1
if (k>11) break
if(sum(full[i,] , na.rm=TRUE)> (i-1)/2) {iStart=FALSE}
if(sum(full[i,] , na.rm=TRUE)< (i-1)/2) {iStart=TRUE}
for (j in k:11 ){
full[i,j] <- iStart
full[j,i] <- iStart
iStart <- !iStart
}
}
#check
apply(full,2,sum, na.rm=TRUE)
apply(full,1,sum, na.rm=TRUE)
full
full<-matrix(nrow=11,ncol=11)
iStart <- TRUE
for (i in 1:11 ) {
k <- i+1
if (k>11) break
if(sum(full[i,] , na.rm=TRUE)> (i-1)/2) {iStart=FALSE}
if(sum(full[i,] , na.rm=TRUE)< (i-1)/2) {iStart=TRUE}
for (j in k:11 ){
full[i,j] <- iStart
full[j,i] <- !iStart
iStart <- !iStart
}
}
#check
apply(full,2,sum, na.rm=TRUE)
apply(full,1,sum, na.rm=TRUE)
full
p=13
full<-matrix(nrow=p,ncol=p)
iStart <- TRUE
for (i in 1:p ) {
k <- i+1
if (k>p) break
if(sum(full[i,] , na.rm=TRUE)> (i-1)/2) {iStart=FALSE}
if(sum(full[i,] , na.rm=TRUE)< (i-1)/2) {iStart=TRUE}
for (j in k:p ){
full[i,j] <- iStart
full[j,i] <- !iStart
iStart <- !iStart
}
}
#check
apply(full,2,sum, na.rm=TRUE)
apply(full,1,sum, na.rm=TRUE)
p=10
full<-matrix(nrow=p,ncol=p)
iStart <- TRUE
for (i in 1:p ) {
k <- i+1
if (k>p) break
if(sum(full[i,] , na.rm=TRUE)> (i-1)/2) {iStart=FALSE}
if(sum(full[i,] , na.rm=TRUE)< (i-1)/2) {iStart=TRUE}
for (j in k:p ){
full[i,j] <- iStart
full[j,i] <- !iStart
iStart <- !iStart
}
}
#check
apply(full,2,sum, na.rm=TRUE)
apply(full,1,sum, na.rm=TRUE)
full
p=6
full<-matrix(nrow=p,ncol=p)
iStart <- TRUE
for (i in 1:p ) {
k <- i+1
if (k>p) break
if(sum(full[i,] , na.rm=TRUE)> (i-1)/2) {iStart=FALSE}
if(sum(full[i,] , na.rm=TRUE)< (i-1)/2) {iStart=TRUE}
for (j in k:p ){
full[i,j] <- iStart
full[j,i] <- !iStart
iStart <- !iStart
}
}
#check
apply(full,2,sum, na.rm=TRUE)
apply(full,1,sum, na.rm=TRUE)
# p is the number of players in the RR
p=8
#make a p by p matrix filled with NA
full<-matrix(nrow=p,ncol=p)
# Set going first to true
iStart <- TRUE
# Loop through each player and assign first/second against each opponent
for (i in 1:p ) {
k <- i+1
#If on last player everything is already assigned so leave
if (k>p) break
# Count the number of firsts already assigned,
# if over or under half of the number of rounds so far
# start with the under represented value. In R you can add logical
# TRUE=1, FALSE=0
if(sum(full[i,] , na.rm=TRUE)> (i-1)/2) {iStart=FALSE}
if(sum(full[i,] , na.rm=TRUE)< (i-1)/2) {iStart=TRUE}
# loop through each opponent, alternating first and seconds
for (j in k:p ){
full[i,j] <- iStart
full[j,i] <- !iStart # make sure the j/i meeting gets the opposite of the i/j meeting
iStart <- !iStart #alternate their next start
}
}
#check that each person has and print full first / second matrix
apply(full,1,sum, na.rm=TRUE)
full
iGoFirst
# p is the number of players in the RR
p=8
#make a p by p matrix filled with NA
iGoFirst<-matrix(nrow=p,ncol=p)
# Set going first to true
iStart <- TRUE
# Loop through each player and assign first/second against each opponent
for (i in 1:p ) {
k <- i+1
#If on last player everything is already assigned so leave
if (k>p) break
# Count the number of firsts already assigned,
# if over or under half of the number of rounds so far
# start with the under represented value. In R you can add logical
# TRUE=1, FALSE=0
if(sum(iGoFirst[i,] , na.rm=TRUE)> (i-1)/2) {iStart=FALSE}
if(sum(iGoFirst[i,] , na.rm=TRUE)< (i-1)/2) {iStart=TRUE}
# loop through each opponent, alternating first and seconds
for (j in k:p ){
iGoFirst[i,j] <- iStart
iGoFirst[j,i] <- !iStart # make sure the j/i meeting gets the opposite of the i/j meeting
iStart <- !iStart #alternate their next start
}
}
#check that each person has and print iGoFirst first / second matrix
apply(iGoFirst,1,sum, na.rm=TRUE)
iGoFirst
# p is the number of players in the RR
p=8
#make a p by p matrix filled with NA
iGoFirst<-matrix(nrow=p,ncol=p)
# Have the first player go second agaisnt his/her first opponent
iStart <- FALSE
# Loop through each player and assign first/second against each opponent
for (i in 1:p ) {
k <- i+1
#If on last player everything is already assigned so leave
if (k>p) break
# Count the number of firsts already assigned,
# if over or under half of the number of rounds so far
# start with the under represented value. In R you can add logical
# TRUE=1, FALSE=0
if(sum(iGoFirst[i,] , na.rm=TRUE)> (i-1)/2) {iStart=FALSE}
if(sum(iGoFirst[i,] , na.rm=TRUE)< (i-1)/2) {iStart=TRUE}
# loop through each opponent, alternating first and seconds
for (j in k:p ){
iGoFirst[i,j] <- iStart
iGoFirst[j,i] <- !iStart # make sure the j/i meeting gets the opposite of the i/j meeting
iStart <- !iStart #alternate their next start
}
}
#check that each person has and print iGoFirst first / second matrix
apply(iGoFirst,1,sum, na.rm=TRUE)
iGoFirst
# p is the number of players in the RR
p=8
#make a p by p matrix filled with NA, where row represents player and column their opponent
iGoFirst<-matrix(nrow=p,ncol=p)
# Have the first player go second agaisnt his/her first opponent
iStart <- FALSE
# Loop through each player(i) and assign first/second against each opponent (j)
for (i in 1:p ) {
k <- i+1
#If on last player everything is already assigned so leave
if (k>p) break
# Count the number of firsts already assigned,
# if over or under half of the number of rounds so far
# first assign the under-represented value.
# In R you can add logical with TRUE=1, FALSE=0
if(sum(iGoFirst[i,] , na.rm=TRUE)> (i-1)/2) {iStart=FALSE}
if(sum(iGoFirst[i,] , na.rm=TRUE)< (i-1)/2) {iStart=TRUE}
# loop through each unassigned opponent, alternating first and seconds
for (j in k:p ){
iGoFirst[i,j] <- iStart
iGoFirst[j,i] <- !iStart # make sure the j/i meeting gets the opposite of the i/j meeting
iStart <- !iStart #alternate their next start
}
}
#check that each person has and print iGoFirst first / second matrix
apply(iGoFirst,1,sum, na.rm=TRUE)
iGoFirst
# p is the number of players in the RR
p=11
#make a p by p matrix filled with NA, where row represents player and column their opponent
iGoFirst<-matrix(nrow=p,ncol=p)
# Have the first player go second agaisnt his/her first opponent
iStart <- FALSE
# Loop through each player(i) and assign first/second against each opponent (j)
for (i in 1:p ) {
k <- i+1
#If on last player everything is already assigned so leave
if (k>p) break
# Count the number of firsts already assigned,
# if over or under half of the number of rounds so far
# first assign the under-represented value.
# In R you can add logical with TRUE=1, FALSE=0
if(sum(iGoFirst[i,] , na.rm=TRUE)> (i-1)/2) {iStart=FALSE}
if(sum(iGoFirst[i,] , na.rm=TRUE)< (i-1)/2) {iStart=TRUE}
# loop through each unassigned opponent, alternating first and seconds
for (j in k:p ){
iGoFirst[i,j] <- iStart
iGoFirst[j,i] <- !iStart # make sure the j/i meeting gets the opposite of the i/j meeting
iStart <- !iStart #alternate their next start
}
}
#check that each person has and print iGoFirst first / second matrix
apply(iGoFirst,1,sum, na.rm=TRUE)
iGoFirst
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
p=11 # p is the number of players in the RR
iGoFirst<-matrix(nrow=p,ncol=p)# p by p matrix row represents player and column their opponent
iStart <- FALSE # Have the first player go second agaisnt his/her first opponent
for (i in 1:p ) {    # Loop through each player(i) and assign first/second against each opponent (j)
k <- i+1
if (k>p) break #If on last player everything is already assigned so leave
# Count the number of firsts already assigned,
# if over or under half of the number of rounds so far
# first assign the under-represented value.
# In R you can add logical with TRUE=1, FALSE=0
if(sum(iGoFirst[i,] , na.rm=TRUE)> (i-1)/2) {iStart=FALSE}
if(sum(iGoFirst[i,] , na.rm=TRUE)< (i-1)/2) {iStart=TRUE}
for (j in k:p ){  # loop through each unassigned opponent, alternating first and seconds
iGoFirst[i,j] <- iStart
iGoFirst[j,i] <- !iStart # make sure the j/i meeting gets the opposite of the i/j meeting
iStart <- !iStart #alternate their next start
}
}
#check that each person has and print iGoFirst first / second matrix
apply(iGoFirst,1,sum, na.rm=TRUE)
iGoFirst
p=10 # p is the number of players in the RR
iGoFirst<-matrix(nrow=p,ncol=p)# p by p matrix row represents player and column their opponent
iStart <- FALSE # Have the first player go second agaisnt his/her first opponent
for (i in 1:p ) {    # Loop through each player(i) and assign first/second against each opponent (j)
k <- i+1
if (k>p) break #If on last player everything is already assigned so leave
# Count the number of firsts already assigned,
# if over or under half of the number of rounds so far
# first assign the under-represented value.
# In R you can add logical with TRUE=1, FALSE=0
if(sum(iGoFirst[i,] , na.rm=TRUE)> (i-1)/2) {iStart=FALSE}
if(sum(iGoFirst[i,] , na.rm=TRUE)< (i-1)/2) {iStart=TRUE}
for (j in k:p ){  # loop through each unassigned opponent, alternating first and seconds
iGoFirst[i,j] <- iStart
iGoFirst[j,i] <- !iStart # make sure the j/i meeting gets the opposite of the i/j meeting
iStart <- !iStart #alternate their next start
}
}
#check that each person has and print iGoFirst first / second matrix
apply(iGoFirst,1,sum, na.rm=TRUE)
iGoFirst
p=10 # p is the number of players in the RR
iGoFirst<-matrix(nrow=p,ncol=p)# build a p by p matrix, row represents player and column their opponent
iStart <- FALSE # Have the first player go second agaisnt their first opponent
for (i in 1:p-1 ) {    # Loop through each player(i) and assign first/second against each opponent (j)
k <- i+1
# Count the number of firsts already assigned,
# if over or under half of the number of rounds so far
# first assign the under-represented value.
# In R you can add logical with TRUE=1, FALSE=0
if(sum(iGoFirst[i,] , na.rm=TRUE)> (i-1)/2) {iStart=FALSE}
if(sum(iGoFirst[i,] , na.rm=TRUE)< (i-1)/2) {iStart=TRUE}
for (j in k:p ){  # loop through each unassigned opponent, alternating first and seconds
iGoFirst[i,j] <- iStart
iGoFirst[j,i] <- !iStart # make sure the j/i meeting gets the opposite of the i/j meeting
iStart <- !iStart #alternate their next start
}
}
#check that each person has and print iGoFirst first / second matrix
apply(iGoFirst,1,sum, na.rm=TRUE)
iGoFirst
setwd("~/GitHub/RepData_PeerAssessment1")
install.packages("knitr")
library("knitr")
echo = TRUE
read.csv("activity.csv")
activity<-read.csv("activity.csv")
head(activity)
aggregate(x=activity,by=date,FUN="sum")
aggregate(x=activity,by=list(date),FUN="sum")
aggregate(steps~date, data=activity, sum)
hist(stepsPerDay$steps)
stepsPerDay<-aggregate(steps~date, data=activity, sum)
hist(stepsPerDay$steps)
hist(stepsPerDay$steps)
mean(stepsPerDay$steps)
median(stepsPerDay$steps)
pattern<-aggregate(steps~interval, data=activity, mean)
ggplot(stepsPerDay$steps)
ggplot2(stepsPerDay$steps)
install("ggplot2")
install.packages("ggplot2")
library("ggplot2")
ggplot2(stepsPerDay$steps)
ggplot(stepsPerDay$steps)
hist(stepsPerDay$steps)
hist(stepsPerDay$steps, title="Steps per Day")
ggplot(stepsPerDay$steps, title="Steps per Day")
hist(stepsPerDay$steps, main="Steps per Day")
hist(stepsPerDay$steps, main="Steps per Day", col="lightgreen")
pattern<-aggregate(steps~interval, data=activity, mean)
plot(pattern$steps,pattern$interval)
plot(pattern$interval, pattern$steps)
plot(pattern$interval, pattern$steps, pch=19)
lines(pattern$interval, pattern$steps)
plot(pattern$interval, as.Date(pattern$steps), pch=19)
head(pattern)
plot(pattern$interval, pattern$steps, pch=19, main=T, type = "l")
plot(pattern$interval, pattern$steps, pch=19, main="Average Number of Steps Taken", ylab="Average Steps", type = "l")
pattern<-aggregate(steps~interval, data=activity, mean)
plot(pattern$interval, pattern$steps, pch=19, main="Average Number of Steps Taken", xlab="5 minute interval", ylab="Average Steps", type = "l")
head (activity)
maxstep=max(pattern$steps)
pattern[pattern$steps==maxstep,2]
pattern$steps==maxstep
maxstep=max(pattern$steps)
maxstep
head(pattern)
pattern[1,pattern$steps==maxstep]
pattern[,pattern$steps==maxstep]
pattern[pattern$steps==maxstep,]
pattern[pattern$steps==maxstep,][1,1]
View(pattern)
View(pattern)
pattern[pattern$steps==maxstep,1]
View(activity)
View(activity)
is.NA(activity$steps)
is.na(activity$steps)
sum(is.na(activity$steps))
str(activity)
medianStep<-aggregate(steps~interval, data=activity, median)
head(medianStep)
fillNA<-function(x, y) ifelse(is.na(x),y,x)
fillNA<-function(x, y) ifelse(is.na(x),y,x)
finnNA(Activity$step,medianStep$step)
fillNA(Activity$step,medianStep$step)
fillNA(activity$step,medianStep$step)
activity2<-fillNA(activity$step,medianStep$step)
activity2<-fillNA(activity$steps,medianStep$steps)
activity2
structure(activity@steps)
structure(activity$steps)
str(activity$steps)
View(activity)
View(activity)
View(activity)
View(activity)
head(activity2,1000)
activity2[16000:17568]
View(activity)
View(medianStep)
View(medianStep)
meanstep<-aggregate(steps~interval, data=activity, mean)
View(medianStep)
View(medianStep)
View(meanstep)
View(meanstep)
boxplot(activty$steps~interval )
boxplot(steps~interval,data=activity )
boxplot.default(steps~interval,data=activity)
boxplot(steps~interval,data=activity, notch=TRUE)
activity2<-fillNA(activity$steps,meanStep$steps)
activity2<-fillNA(activity$steps,meanstep$steps)
activity2[16000:17568]
meanstep
activity2<-fillNA(activity$steps,round(meanstep$steps,digits=0))
activity2[16000:17568]
View(activity)
View(activity)
activitynew<-fillNA(activity$steps,round(meanstep$steps,digits=0))
activity2<-cbind(activitynew,activity[,2:3])
stepsPerDay2<-aggregate(steps~date, data=activity2, sum)
hist(stepsPerDay2$steps, main="Steps per Day", col="lightblue")
mean(stepsPerDay2$steps)
median(stepsPerDay2$steps)
View(activity2)
View(activity2)
steps<-fillNA(activity$steps,round(meanstep$steps,digits=0))
activity2<-cbind(activitynew,activity[,2:3])
steps<-fillNA(activity$steps,round(meanstep$steps,digits=0))
activity2<-cbind(steps,activity[,2:3])
stepsPerDay2<-aggregate(steps~date, data=activity2, sum)
hist(stepsPerDay2$steps, main="Steps per Day", col="lightblue")
mean(stepsPerDay2$steps)
median(stepsPerDay2$steps)
stepsPerDay<-aggregate(steps~date, data=activity, sum)
hist(stepsPerDay$steps, main="Steps per Day", col="lightgreen")
mean(stepsPerDay$steps)
median(stepsPerDay$steps)
weekdays(activity2$date)
str(activty2)
str(activity2)
weekdays(as.date(activity2$date))
weekdays(as.Date(activity2$date))
install.packages("lattice")
library(lattice)
dow<-weekdays(as.Date(activity2$date))
dow
dayend<- function(x) ifelse(x=="Sunday" | x=="Saturday", x<="Weekend", x<-"Weekday")
dow2<-dayend(dow)
dow2
dow
dayend(dow)
dayend<- function(x) ifelse((x=="Sunday" || x=="Saturday"), x<="Weekend", x<-"Weekday")
dayend(dow)
dayend<- function(x) ifelse((x=="Sunday" | x=="Saturday"), x<="Weekend", x<-"Weekday")
dow<-weekdays(as.Date(activity2$date))
dayend<- function(x) ifelse((x=="Sunday" | x=="Saturday"), x<="Weekend", x<-"Weekday")
dow2<dayend(dow)
dow<-weekdays(as.Date(activity2$date))
dayend<- function(x) ifelse((x=="Sunday" | x=="Saturday"), x<="Weekend", x<-"Weekday")
dow2<-dayend(dow)
dow2
dow<-weekdays(as.Date(activity2$date))
dayend<- function(x) ifelse((x=="Sunday" | x=="Saturday"), x<-"Weekend", x<-"Weekday")
dow2<-dayend(dow)
dow2
activity2$dow2<-dow2
View(activity2)
View(activity2)
activity2$dow<-weekdays(as.Date(activity2$date))
dayend<- function(x) ifelse((x=="Sunday" | x=="Saturday"), x<-"Weekend", x<-"Weekday")
activity2$dow2<-dayend(dow)
erase(dow)
rm dow
rm(dow)
rm(dow2)
View(activity2)
View(activity2)
meanstep2<-aggregate(steps~interval+dow2, data=activity2, mean)
View(meanstep2)
View(meanstep2)
xyplot(steps~interval | dow2
main="Average Steps vs. Time of Day",
ylab="steps", xlab="Time of Day")
xyplot(steps~interval | dow2,main="Average Steps vs. Time of Day", ylab="steps", xlab="Time of Day")
xyplot(steps~interval | dow2, data=meanstep2, main="Average Steps vs. Time of Day", ylab="steps", xlab="Time of Day")
xyplot(steps~interval | dow2, data=meanstep2, main="Average Steps vs. Time of Day", ylab="steps", xlab="Time of Day", type="l")
xyplot(steps~interval | dow2, data=meanstep2, main="Average Steps vs. Time of Day", ylab="steps", xlab="Time of Day", type="l", layout=c(1,2))
meanstep2<-aggregate(steps~interval+dow2, data=activity2, mean) # averages for interval for both weekday/end
